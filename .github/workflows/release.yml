name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to build for'
        required: true
        default: 'v0.1.0'

permissions:
  contents: write

jobs:
  release:
    name: Release - ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: aarch64-apple-darwin
            os: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=$(echo ${{ github.event.inputs.tag }} | sed 's/^v//')
          else
            VERSION=$(echo ${{ github.event.release.tag_name }} | sed 's/^v//')
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (ARM64 Linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install 7z (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install 7zip

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Package
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          VERSION="${{ steps.version.outputs.version }}"
          if [ "${{ matrix.target }}" = "x86_64-pc-windows-msvc" ]; then
            7z a "../../../obsidian-lsp-$VERSION-${{ matrix.target }}.zip" obsidian-lsp.exe
          else
            tar czf "../../../obsidian-lsp-$VERSION-${{ matrix.target }}.tar.gz" obsidian-lsp
          fi

      - name: Upload binary to release
        uses: softprops/action-gh-release@v1
        if: matrix.target == 'x86_64-pc-windows-msvc'
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.event.release.tag_name }}
          files: obsidian-lsp-${{ steps.version.outputs.version }}-${{ matrix.target }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binary to release (Unix)
        uses: softprops/action-gh-release@v1
        if: matrix.target != 'x86_64-pc-windows-msvc'
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.event.release.tag_name }}
          files: obsidian-lsp-${{ steps.version.outputs.version }}-${{ matrix.target }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}